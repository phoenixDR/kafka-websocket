// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/websocket/server.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	websocket "github.com/phoenixDR/kafka-websocket/internal/websocket"
)

// MockWsConnection is a mock of WsConnection interface.
type MockWsConnection struct {
	ctrl     *gomock.Controller
	recorder *MockWsConnectionMockRecorder
}

// MockWsConnectionMockRecorder is the mock recorder for MockWsConnection.
type MockWsConnectionMockRecorder struct {
	mock *MockWsConnection
}

// NewMockWsConnection creates a new mock instance.
func NewMockWsConnection(ctrl *gomock.Controller) *MockWsConnection {
	mock := &MockWsConnection{ctrl: ctrl}
	mock.recorder = &MockWsConnectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWsConnection) EXPECT() *MockWsConnectionMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockWsConnection) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockWsConnectionMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockWsConnection)(nil).Close))
}

// Read mocks base method.
func (m *MockWsConnection) Read(msg []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", msg)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockWsConnectionMockRecorder) Read(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockWsConnection)(nil).Read), msg)
}

// SendMessage mocks base method.
func (m *MockWsConnection) SendMessage(message string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", message)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockWsConnectionMockRecorder) SendMessage(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockWsConnection)(nil).SendMessage), message)
}

// Write mocks base method.
func (m *MockWsConnection) Write(msg []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", msg)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockWsConnectionMockRecorder) Write(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockWsConnection)(nil).Write), msg)
}

// MockWsServerInterface is a mock of WsServerInterface interface.
type MockWsServerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockWsServerInterfaceMockRecorder
}

// MockWsServerInterfaceMockRecorder is the mock recorder for MockWsServerInterface.
type MockWsServerInterfaceMockRecorder struct {
	mock *MockWsServerInterface
}

// NewMockWsServerInterface creates a new mock instance.
func NewMockWsServerInterface(ctrl *gomock.Controller) *MockWsServerInterface {
	mock := &MockWsServerInterface{ctrl: ctrl}
	mock.recorder = &MockWsServerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWsServerInterface) EXPECT() *MockWsServerInterfaceMockRecorder {
	return m.recorder
}

// BroadcastMessage mocks base method.
func (m *MockWsServerInterface) BroadcastMessage(message string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BroadcastMessage", message)
}

// BroadcastMessage indicates an expected call of BroadcastMessage.
func (mr *MockWsServerInterfaceMockRecorder) BroadcastMessage(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BroadcastMessage", reflect.TypeOf((*MockWsServerInterface)(nil).BroadcastMessage), message)
}

// RegisterClient mocks base method.
func (m *MockWsServerInterface) RegisterClient(client *websocket.Client) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterClient", client)
}

// RegisterClient indicates an expected call of RegisterClient.
func (mr *MockWsServerInterfaceMockRecorder) RegisterClient(client interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterClient", reflect.TypeOf((*MockWsServerInterface)(nil).RegisterClient), client)
}

// Run mocks base method.
func (m *MockWsServerInterface) Run() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Run")
}

// Run indicates an expected call of Run.
func (mr *MockWsServerInterfaceMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockWsServerInterface)(nil).Run))
}

// SendMessageToClient mocks base method.
func (m *MockWsServerInterface) SendMessageToClient(client *websocket.Client, message string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendMessageToClient", client, message)
}

// SendMessageToClient indicates an expected call of SendMessageToClient.
func (mr *MockWsServerInterfaceMockRecorder) SendMessageToClient(client, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessageToClient", reflect.TypeOf((*MockWsServerInterface)(nil).SendMessageToClient), client, message)
}

// UnregisterClient mocks base method.
func (m *MockWsServerInterface) UnregisterClient(client *websocket.Client) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UnregisterClient", client)
}

// UnregisterClient indicates an expected call of UnregisterClient.
func (mr *MockWsServerInterfaceMockRecorder) UnregisterClient(client interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnregisterClient", reflect.TypeOf((*MockWsServerInterface)(nil).UnregisterClient), client)
}
